name: 🚀 Deploy HubIcons to IIS

on:
  push:
    branches: [ main ]   # Branche de déploiement
  workflow_dispatch:     # Permet de lancer manuellement depuis GitHub Actions

env:
  FRONT_SRC: HubIcons-Front
  API_SRC: HubIcons-API
  FRONT_DST: C:\inetpub\wwwroot\HubIcons-Front
  API_DST: C:\inetpub\wwwroot\HubIcons-API

jobs:
  deploy:
    runs-on: [self-hosted, windows]  # ton runner auto-hébergé
    steps:
      - name: 🧭 Checkout repo
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # ---------- FRONTEND ----------
      - name: 📦 Install Front deps
        working-directory: ${{ env.FRONT_SRC }}
        run: npm install

      - name: 🏗️ Build Frontend
        working-directory: ${{ env.FRONT_SRC }}
        run: npm run build

      - name: 📂 Deploy Frontend to IIS
        shell: powershell
        run: |
          $src = Join-Path "${{ github.workspace }}" "${{ env.FRONT_SRC }}\dist"
          $dst = "${{ env.FRONT_DST }}"
          if (!(Test-Path $dst)) { New-Item -ItemType Directory -Path $dst | Out-Null }
          robocopy $src $dst /MIR /XF web.config /R:1 /W:1 /NFL /NDL /NJH /NJS /NP
          $exitCode = $LASTEXITCODE
          if ($exitCode -lt 8) {
            Write-Host "✅ Frontend déployé dans $dst (code Robocopy: $exitCode)"
            exit 0
          } else {
            Write-Host "❌ Robocopy a échoué (code $exitCode)"
            exit $exitCode
          }

      # ---------- BACKEND ----------
      - name: 📦 Install API deps
        working-directory: ${{ env.API_SRC }}
        run: npm install --omit=dev

      - name: 📂 Deploy API to IIS
        shell: powershell
        run: |
          $src = Join-Path "${{ github.workspace }}" "${{ env.API_SRC }}"
          $dst = "${{ env.API_DST }}"
          if (!(Test-Path $dst)) { New-Item -ItemType Directory -Path $dst | Out-Null }
          robocopy $src $dst /MIR /R:1 /W:1 /NFL /NDL /NJH /NJS /NP
          $exitCode = $LASTEXITCODE
          if ($exitCode -lt 8) {
            Write-Host "✅ API copiée dans $dst (code Robocopy: $exitCode)"
            exit 0
          } else {
            Write-Host "❌ Robocopy a échoué (code $exitCode)"
            exit $exitCode
          }

      # ---------- RESTART API ----------
      - name: 🔁 Restart API via PM2
        shell: powershell
        run: |
          pm2 delete hubicons-api 2>$null | Out-Null
          pm2 start "${{ env.API_DST }}\server.cjs" --name hubicons-api
          pm2 save
          Write-Host "♻️ API redémarrée via PM2"

      # ---------- (Optionnel) Reload IIS ----------
      - name: 🔃 IIS Reset (optional)
        if: ${{ false }}
        run: iisreset
